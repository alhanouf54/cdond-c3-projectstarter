version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request PUT --data "" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request PUT --data "" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID}
         
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i 
             npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test 
          command: |
           cd frontend
           npm i
           npm run test
      
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test 
          command: |
           cd backend
           npm i
           npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-build]
      - run:
          name: Analyze the code
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyze the code
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: | 
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udaPeople
   
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udaPeople
     
      - run:
          name: Add back-end ip to ansible inventory
          command: |
           URLS=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
              
             echo "$URLS">> .circleci/ansible/inventory.txt
             echo "${CIRCLE_WORKFLOW_ID:0:7}"
             
            curl -H "Content-Type: text/plain" -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request PUT --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}  
          
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b4:6a:45:81:21:9d:fb:4b:70:d5:03:a0:28:90:7f:9f"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
            apk add curl
     
      - run:
          name: Configure backend server
          command: |
            echo $(curl -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request GET https://api.memstash.io/values/backend_api) >> .circleci/ansible/inventory
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/config-server-playbook.yml


     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
             cd backend
             npm i
             npm run migrations
      - run:
          name: Send migration results to memstash
          command: |
           curl -H "Content-Type: text/plain" -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request PUT --data "true" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}
           
      - destroy-environment
         

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update tar gzip ansible nodejs npm curl
           pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - destroy-environment
      - revert-migrations
   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b4:6a:45:81:21:9d:fb:4b:70:d5:03:a0:28:90:7f:9f"
      - attach_workspace:
          at: ~/project
      
      - run:
          name: Install AWS CLI
          command: pip3 install awscli
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible-galaxy install weareinteractive.environment
      - run:
          name: Install curl
          command: apk add curl
      - run:
          name: Install Open SSH
          command: apk add openssh-client
      - run:
          name: Check folders
          command: |
            echo $(pwd)
            ls /root/project/backend
      - run:
          name: Configure backend server
          command: |
            echo $(curl -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request GET https://api.memstash.io/values/backend_api) >> .circleci/ansible/inventory
            cd .circleci/ansible
            ansible-playbook -i inventory deploy-backend-playbook.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           apk add --update curl
           pip install awscli
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test
          command: |
             backendIP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
             curl "http://${backendIP}:3030/api/status"
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-2.amazonaws.com/#/employees"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "b4:6a:45:81:21:9d:fb:4b:70:d5:03:a0:28:90:7f:9f"
      - run:
          name: Update cloudfront distribution
          command: |
           export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name=='WorkflowID'].Value" --no-paginate --output text)
            echo Old Workflow Id: "${OldWorkflowID}"
            if [ -n "${OldWorkflowID}" ]
            then
              echo "Updating existing CloudFront stack..."
              aws cloudformation update-stack \
                --template-body file://./.circleci/files/cloudfront.yml \
                --stack-name cloudfront-udapeople \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID}
              echo "Saving old workflow id..."
              curl -H "Content-Type: text/plain" -H "token: b57dc1d2-fd92-48ee-a211-47f04bdf8c60" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/old_workflow_id
            else
              echo "Creating new CloudFront sack..."
              aws cloudformation create-stack \
                --template-body file://./.circleci/files/cloudfront.yml \
                --stack-name cloudfront-udapeople \
                --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
            fi
  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id
            command: |
              export OldWorkflowID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
               aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
               aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
               aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
         requires: [scan-frontend, scan-backend]
         filters:
            branches:
              only: master
      - configure-infrastructure:

         requires: [deploy-infrastructure]
      - run-migrations:

         requires: [configure-infrastructure]
      - deploy-frontend:

         requires: [run-migrations]
      - deploy-backend:
     
         requires: [run-migrations]
      - smoke-test:
        
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          
          requires: [smoke-test]
      - cleanup:
           
         requires: [cloudfront-update]
